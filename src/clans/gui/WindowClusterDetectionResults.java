package clans.gui;

import java.awt.Color;
import java.util.*;

import clans.model.SequenceCluster;
import clans.model.SequenceGroup;

public class WindowClusterDetectionResults extends javax.swing.JDialog {

    /**
     * 
     */
    private static final long serialVersionUID = 8677383220559650947L;

    ProgramWindow parent;
    Vector<SequenceCluster> clusters;
    String[] clusterNames;
    boolean didBootStrap = false;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addEachSelectedClusterAsSeqGroupButton;
    private javax.swing.JButton addSelectedSeqsAsOneGroupButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JList clusterList;
    private javax.swing.JPanel listPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JScrollPane scrollPanel;
    // End of variables declaration//GEN-END:variables

    public WindowClusterDetectionResults(ProgramWindow parent, Vector<SequenceCluster> clusters, String windowTitle, boolean didBootStrap) {
        this.parent = parent;
        this.clusters = clusters;
        this.didBootStrap = didBootStrap;
        this.clusterNames = getClusterNames(clusters);
        this.setTitle(windowTitle);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        listPanel = new javax.swing.JPanel();
        scrollPanel = new javax.swing.JScrollPane();
        clusterList = new javax.swing.JList(clusterNames);
        buttonPanel = new javax.swing.JPanel();
        addSelectedSeqsAsOneGroupButton = new javax.swing.JButton();
        addEachSelectedClusterAsSeqGroupButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        listPanel.setLayout(new javax.swing.BoxLayout(listPanel, javax.swing.BoxLayout.X_AXIS));

        clusterList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                clusterListValueChanged(evt);
            }
        });

        scrollPanel.setViewportView(clusterList);

        listPanel.add(scrollPanel);

        getContentPane().add(listPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setLayout(new java.awt.GridLayout(1, 0));

        addSelectedSeqsAsOneGroupButton.setText("Add selected clusters as one group");
        addSelectedSeqsAsOneGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addSelectedSeqsAsOneGroupButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(addSelectedSeqsAsOneGroupButton);

        addEachSelectedClusterAsSeqGroupButton.setText("Add each selected cluster as one group");
        addEachSelectedClusterAsSeqGroupButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addEachSelectedClusterAsSeqGroupButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(addEachSelectedClusterAsSeqGroupButton);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        buttonPanel.add(closeButton);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        pack();
    }//GEN-END:initComponents

    /**
     * add each of the currently selected clusters as separate sequence group
     * @param evt
     */
    private void addEachSelectedClusterAsSeqGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addEachSelectedClusterAsSeqGroupButtonActionPerformed
        String newName=javax.swing.JOptionPane.showInputDialog(this,"Base group name:",this.getTitle() + "_");

        if(newName == null){
            return;
        }

        int[] selectedValues = clusterList.getSelectedIndices();

        if(selectedValues.length == 0) {
            return;
        }

        for(int i = 0; i < selectedValues.length; i++) {

            SequenceGroup newGroup = new SequenceGroup(newName + selectedValues[i], clusters.get(selectedValues[i]).members,
                    parent.data.groupsize, 0, Color.red);

            parent.data.seqgroupsvec.addElement(newGroup);
        }

        parent.repaint();
    }//GEN-LAST:event_addEachSelectedClusterAsSeqGroupButtonActionPerformed

    /**
     * add the currently selected groups to the seqgroups vector
     * @param evt
     */
    private void addSelectedSeqsAsOneGroupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addSelectedSeqsAsOneGroupButtonActionPerformed
        String newName = javax.swing.JOptionPane.showInputDialog(this,"Group name:","selected sequences");

        if(newName == null){
            return;
        }

        int[] selectedValues = clusterList.getSelectedIndices();
        if(selectedValues.length == 0){
            return;
        }

        int newSize = 0;
        for(int i = 0; i < selectedValues.length; i++) {
            newSize += clusters.get(selectedValues[i]).members.length;
        }//end for i

        //now add all the values to a new array
        int[] newSelected = new int[newSize];
        int currCount = 0;
        for(int i = 0; i < selectedValues.length; i++) {

            int[] clusterMembers = clusters.get(selectedValues[i]).members;
            for(int j = 0; j < clusterMembers.length; j++) {
                newSelected[j + currCount] = clusterMembers[j];
            }//end for j
            currCount += clusterMembers.length;
        }//end for i
        
        SequenceGroup newGroup = new SequenceGroup(newName, newSelected, parent.data.groupsize, 0, Color.red);
        parent.data.seqgroupsvec.addElement(newGroup);

        parent.repaint();
    }//GEN-LAST:event_addSelectedSeqsAsOneGroupButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        this.setVisible(false);
        dispose();
    }//GEN-LAST:event_closeButtonActionPerformed

    /**
     * update the selected sequences in parent
     * @param evt
     */
    private void clusterListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_clusterListValueChanged
        int[] selectedValues = clusterList.getSelectedIndices();
        int newSize = 0;
        for (int i = 0; i < selectedValues.length; i++) {
            newSize += clusters.get(selectedValues[i]).members.length;
        }//end for i

        //now add all the values to a new array
        int[] newSelected = new int[newSize];
        float[] clusterConfidence = null;
        if(didBootStrap) {
            //System.out.println("not using sequence confidences");
            clusterConfidence = new float[newSize];
        }

        int currCount=0;
        for (int i = 0; i < selectedValues.length; i++) {
            int[] clusterMembers = clusters.get(selectedValues[i]).members;
            float[] myConfidence = clusters.get(selectedValues[i]).seqConfidence;

            if(didBootStrap) { // was: myConfidence != null){
                for(int j = 0; j < clusterMembers.length; j++){
                    newSelected[j + currCount] = clusterMembers[j];
                    clusterConfidence[j + currCount] = myConfidence[j];
                }//end for j
            } else {
                for(int j = 0; j < clusterMembers.length; j++){
                    newSelected[j + currCount] = clusterMembers[j];
                }//end for j
            }

            currCount += clusterMembers.length;
        }//end for i

        parent.data.selectedSequencesIndices = newSelected;
        parent.clusterconf = clusterConfidence;
        parent.repaint();
    }//GEN-LAST:event_clusterListValueChanged

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    /**
     * convert the cluster to s.th. displayable as a String clustername and number of elements for example
     * 
     * @param inClusters
     * @return
     */
    String[] getClusterNames(Vector<SequenceCluster> inClusters) {
        String[] returnNames = new String[inClusters.size()];
        for (int i = 0; i < inClusters.size(); i++) {

            if (inClusters.get(i).clusterConfidence > -1) {
                returnNames[i] = inClusters.get(i).name + " (" + inClusters.get(i).members.length + " sequences) (jacknife:"
                        + inClusters.get(i).clusterConfidence * 100 + "%)";

            } else {
                returnNames[i] = inClusters.get(i).name + " (" + inClusters.get(i).members.length + " sequences)";
            }

        }
        return returnNames;
    }

}//end clusterwindow
