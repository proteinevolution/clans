/*
 * clusteroptionsdialog.java
 *
 * Created on April 26, 2004, 6:38 PM
 */
package clans.gui;
import java.util.Vector;

import javax.swing.JLabel;
/**
 *
 * @author  tancred
 */
public class WindowAutomaticClusterDetection extends javax.swing.JDialog {
    
    /**
	 * 
	 */
	private static final long serialVersionUID = 909099523010844962L;
	
	java.util.Vector<String> optionsvec;

	// Variables declaration - do not modify//GEN-BEGIN:variables
	public javax.swing.JCheckBox bootstrapcheckbox;
	private javax.swing.JPanel bootstrappanel;
	private javax.swing.JPanel buttonspanel;
	private javax.swing.JButton cancelbutton;
	private javax.swing.ButtonGroup clustertypebuttonGroup;
	private javax.swing.JRadioButton convexclusterradiobutton;
	private javax.swing.JLabel convexlabel;
	private javax.swing.JPanel convexpanel;
	private javax.swing.JTextField convextextfield;
	private javax.swing.JLabel emptylabel2;
	private javax.swing.JCheckBox globalaveragecheckbox;
	private javax.swing.JRadioButton linkageclusterradiobutton;
	private javax.swing.JLabel linkagelabel;
	private javax.swing.JPanel linkagepanel;
	private javax.swing.JTextField linkagetextfield;
	private javax.swing.JLabel maxroundslabel;
	private javax.swing.JTextField maxroundstextfield;
	private javax.swing.JLabel minseqlabel;
	private javax.swing.JLabel minseqslabelconvex;
	private javax.swing.JLabel minseqslabellinkage;
	private javax.swing.JTextField minseqstextfieldconvex;
	private javax.swing.JTextField minseqstextfieldlinkage;
	private javax.swing.JTextField minseqstextfieldnetwork;
	private javax.swing.JRadioButton networkclusterradiobutton;
	private javax.swing.JPanel networkpanel;
	private javax.swing.JLabel nolabel;
	private javax.swing.JCheckBox offsetcheckbox;
	private javax.swing.JButton okbutton;
	private javax.swing.JPanel optionspanel;
	private javax.swing.JLabel replicateslabel;
	private javax.swing.JTextField replicatestextfield;
	private javax.swing.JLabel rmlabel;
	private javax.swing.JTextField rmtextfield;
	private javax.swing.JLabel spacerlabel;
	private javax.swing.JLabel spacerlabel1;
	private JLabel lblNewLabel;
	// End of variables declaration//GEN-END:variables
    
    public WindowAutomaticClusterDetection(java.awt.Frame parent, Vector<String> optionsvec) {
		super(parent, true);
		this.optionsvec = optionsvec;
		initComponents();
	}
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        clustertypebuttonGroup = new javax.swing.ButtonGroup();
        optionspanel = new javax.swing.JPanel();
        convexpanel = new javax.swing.JPanel();
        convexclusterradiobutton = new javax.swing.JRadioButton();
        convexlabel = new javax.swing.JLabel();
        convextextfield = new javax.swing.JTextField();
        spacerlabel = new javax.swing.JLabel();
        minseqslabelconvex = new javax.swing.JLabel();
        minseqstextfieldconvex = new javax.swing.JTextField();
        linkagepanel = new javax.swing.JPanel();
        linkageclusterradiobutton = new javax.swing.JRadioButton();
        linkagelabel = new javax.swing.JLabel();
        linkagetextfield = new javax.swing.JTextField();
        spacerlabel1 = new javax.swing.JLabel();
        minseqslabellinkage = new javax.swing.JLabel();
        minseqstextfieldlinkage = new javax.swing.JTextField();
        networkpanel = new javax.swing.JPanel();
        networkclusterradiobutton = new javax.swing.JRadioButton();
        minseqlabel = new javax.swing.JLabel();
        minseqstextfieldnetwork = new javax.swing.JTextField();
        offsetcheckbox = new javax.swing.JCheckBox();
        globalaveragecheckbox = new javax.swing.JCheckBox();
        emptylabel2 = new javax.swing.JLabel();
        maxroundslabel = new javax.swing.JLabel();
        maxroundstextfield = new javax.swing.JTextField();
        bootstrappanel = new javax.swing.JPanel();
        bootstrapcheckbox = new javax.swing.JCheckBox();
        replicateslabel = new javax.swing.JLabel();
        replicatestextfield = new javax.swing.JTextField();
        nolabel = new javax.swing.JLabel();
        rmlabel = new javax.swing.JLabel();
        rmtextfield = new javax.swing.JTextField();
        buttonspanel = new javax.swing.JPanel();
        okbutton = new javax.swing.JButton();
        cancelbutton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        optionspanel.setLayout(new java.awt.GridLayout(0, 1));

        convexpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        convexpanel.setLayout(new java.awt.GridLayout(2, 0));

        clustertypebuttonGroup.add(convexclusterradiobutton);
        convexclusterradiobutton.setText("Convex clustering (slowest)");
        convexpanel.add(convexclusterradiobutton);

        convexlabel.setText("stdev cutoff");
        convexpanel.add(convexlabel);

        convextextfield.setText("0.5");
        convexpanel.add(convextextfield);

        spacerlabel.setText(" ");
        convexpanel.add(spacerlabel);

        minseqslabelconvex.setText("min. sequences per cluster");
        convexpanel.add(minseqslabelconvex);

        minseqstextfieldconvex.setText("2");
        convexpanel.add(minseqstextfieldconvex);

        optionspanel.add(convexpanel);

        linkagepanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        linkagepanel.setLayout(new java.awt.GridLayout(2, 0));

        clustertypebuttonGroup.add(linkageclusterradiobutton);
        linkageclusterradiobutton.setSelected(true);
        linkageclusterradiobutton.setText("Linkage clustering");
        linkagepanel.add(linkageclusterradiobutton);

        linkagelabel.setText("minimum links");
        linkagepanel.add(linkagelabel);

        linkagetextfield.setText("1");
        linkagepanel.add(linkagetextfield);

        spacerlabel1.setText(" ");
        linkagepanel.add(spacerlabel1);

        minseqslabellinkage.setText("min. sequences per cluster");
        linkagepanel.add(minseqslabellinkage);

        minseqstextfieldlinkage.setText("2");
        linkagepanel.add(minseqstextfieldlinkage);

        optionspanel.add(linkagepanel);

        networkpanel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        networkpanel.setLayout(new java.awt.GridLayout(0, 3));

        clustertypebuttonGroup.add(networkclusterradiobutton);
        networkclusterradiobutton.setText("Network based (fastest)");
        networkpanel.add(networkclusterradiobutton);

        minseqlabel.setText("min. sequences per cluster");
        networkpanel.add(minseqlabel);

        minseqstextfieldnetwork.setText("2");
        networkpanel.add(minseqstextfieldnetwork);
        
        lblNewLabel = new JLabel("");
        networkpanel.add(lblNewLabel);

        offsetcheckbox.setSelected(true);
        offsetcheckbox.setText("offset values");
        networkpanel.add(offsetcheckbox);

        globalaveragecheckbox.setText("global average");
        networkpanel.add(globalaveragecheckbox);
        networkpanel.add(emptylabel2);

        maxroundslabel.setText("Max. rounds");
        networkpanel.add(maxroundslabel);

        maxroundstextfield.setText("100");
        networkpanel.add(maxroundstextfield);

        optionspanel.add(networkpanel);

        bootstrappanel.setBackground(new java.awt.Color(153, 153, 153));
        bootstrappanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        bootstrappanel.setLayout(new java.awt.GridLayout(0, 3));

        bootstrapcheckbox.setBackground(new java.awt.Color(153, 153, 153));
        bootstrapcheckbox.setText("Jacknife");
        bootstrappanel.add(bootstrapcheckbox);

        replicateslabel.setText("Replicates:");
        bootstrappanel.add(replicateslabel);

        replicatestextfield.setText("100");
        bootstrappanel.add(replicatestextfield);
        bootstrappanel.add(nolabel);

        rmlabel.setText("remove data");
        bootstrappanel.add(rmlabel);

        rmtextfield.setText("0.1");
        bootstrappanel.add(rmtextfield);

        optionspanel.add(bootstrappanel);

        getContentPane().add(optionspanel, java.awt.BorderLayout.CENTER);

        buttonspanel.setLayout(new java.awt.GridLayout(1, 0));

        okbutton.setText("OK");
        okbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okbuttonActionPerformed(evt);
            }
        });
        buttonspanel.add(okbutton);

        cancelbutton.setText("CANCEL");
        cancelbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelbuttonActionPerformed(evt);
            }
        });
        buttonspanel.add(cancelbutton);

        getContentPane().add(buttonspanel, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelbuttonActionPerformed
        optionsvec.clear();
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelbuttonActionPerformed

    private void okbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okbuttonActionPerformed
        optionsvec.clear();
        if(convexclusterradiobutton.isSelected()){
            //if I want convec clustering
            optionsvec.addElement("convex");
            optionsvec.addElement(convextextfield.getText());
            optionsvec.addElement(minseqstextfieldconvex.getText());
            if(bootstrapcheckbox.isSelected()){
                optionsvec.addElement("true");
                optionsvec.addElement(replicatestextfield.getText());
                optionsvec.addElement(rmtextfield.getText());
            }else{
                optionsvec.addElement("false");
            }
        }else if(networkclusterradiobutton.isSelected()){
            optionsvec.addElement("network");
            optionsvec.addElement(minseqstextfieldnetwork.getText());
            if(offsetcheckbox.isSelected()){
                optionsvec.addElement("true");
            }else{
                optionsvec.addElement("false");
            }
            if(globalaveragecheckbox.isSelected()){//actually a globalaveragecheckbox
                optionsvec.addElement("true");
            }else{
                optionsvec.addElement("false");
            }
            if(bootstrapcheckbox.isSelected()){
                optionsvec.addElement("true");
                optionsvec.addElement(replicatestextfield.getText());
                optionsvec.addElement(rmtextfield.getText());
            }else{
                optionsvec.addElement("false");
            }
            int maxrounds=100;
            try{
                maxrounds=Integer.parseInt(maxroundstextfield.getText());
            }catch(NumberFormatException ne){
                System.err.println("ERROR; cannot parse int from "+maxroundstextfield.getText());
            }
            optionsvec.addElement(new Integer(maxrounds).toString());
        }else{
            optionsvec.addElement("linkage");
            optionsvec.addElement(linkagetextfield.getText());
            optionsvec.addElement(minseqstextfieldlinkage.getText());
            if(bootstrapcheckbox.isSelected()){
                optionsvec.addElement("true");
                optionsvec.addElement(replicatestextfield.getText());
                optionsvec.addElement(rmtextfield.getText());
            }else{
                optionsvec.addElement("false");
            }
        }
        setVisible(false);
        dispose();
    }//GEN-LAST:event_okbuttonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
}
